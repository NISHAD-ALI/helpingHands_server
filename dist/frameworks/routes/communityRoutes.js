"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const communityController_1 = __importDefault(require("../../controllers/communityController"));
const communityUsecase_1 = __importDefault(require("../../useCases/communityUsecase"));
const jwtAuth_1 = __importDefault(require("../utils/jwtAuth"));
const mailGenerator_1 = __importDefault(require("../utils/mailGenerator"));
const otpGenerator_1 = __importDefault(require("../utils/otpGenerator"));
const hashedPassword_1 = __importDefault(require("../utils/hashedPassword"));
const communityRepository_1 = __importDefault(require("../repositories/communityRepository"));
const multer_1 = require("../middlewares/multer");
const cloudinary_1 = __importDefault(require("../utils/cloudinary"));
const eventUsecase_1 = __importDefault(require("../../useCases/eventUsecase"));
const eventRepository_1 = __importDefault(require("../repositories/eventRepository"));
const eventController_1 = __importDefault(require("../../controllers/eventController"));
const communityAuth_1 = __importDefault(require("../middlewares/communityAuth"));
const chatController_1 = __importDefault(require("../../controllers/chatController"));
const chatUsecase_1 = __importDefault(require("../../useCases/chatUsecase"));
const chatRepository_1 = __importDefault(require("../repositories/chatRepository"));
const router = express_1.default.Router();
const communityRepo = new communityRepository_1.default();
const otp = new otpGenerator_1.default();
const jwt = new jwtAuth_1.default();
const mail = new mailGenerator_1.default();
const hash = new hashedPassword_1.default();
const cloudinary = new cloudinary_1.default();
const eventRepo = new eventRepository_1.default();
const chatRepo = new chatRepository_1.default();
const community = new communityUsecase_1.default(communityRepo, otp, jwt, mail, hash, cloudinary);
const commController = new communityController_1.default(community);
const event = new eventUsecase_1.default(eventRepo, cloudinary, jwt);
const eventNewController = new eventController_1.default(event, jwt);
const chat = new chatUsecase_1.default(chatRepo);
const chatNewController = new chatController_1.default(chat);
router.post('/signup', (req, res) => commController.signup(req, res));
router.post('/verifyOtp', (req, res) => commController.verifyOtp(req, res));
router.post('/login', (req, res) => commController.login(req, res));
router.get('/logout', (req, res) => commController.logout(req, res));
router.post('/resendOtp', (req, res) => commController.resendOtp(req, res));
router.post('/createEvents', communityAuth_1.default, multer_1.uploadFile.any(), (req, res) => eventNewController.createEvents(req, res));
router.get('/getEvents', (req, res) => eventNewController.getEvents(req, res));
router.get('/getEventsById/:id', (req, res) => eventNewController.getEventsById(req, res));
router.get('/deleteEvent/:id', (req, res) => eventNewController.deleteEvent(req, res));
router.patch('/editEvent', multer_1.uploadFile.any(), (req, res) => eventNewController.editEvent(req, res));
router.get('/profile', communityAuth_1.default, (req, res) => commController.getProfile(req, res));
router.patch('/editProfile', communityAuth_1.default, multer_1.uploadFile.single('profileImage'), (req, res) => commController.editProfile(req, res));
router.patch('/updateStatus', communityAuth_1.default, (req, res) => commController.updateStatus(req, res));
router.get('/getVolunteers', communityAuth_1.default, (req, res) => commController.getVolunteers(req, res));
router.get('/getEventsFilteredByDateRange', (req, res) => eventNewController.getEventsFilteredByDateRange(req, res));
router.get('/getEventsFilteredByCategory', (req, res) => eventNewController.getEventsFilteredByCategory(req, res));
router.get('/getEventsFilteredByDay', (req, res) => eventNewController.getEventsFilteredByDay(req, res));
router.get('/searchEvents', (req, res) => eventNewController.searchEvents(req, res));
router.get("/messages/:id", (req, res) => chatNewController.getMessages(req, res));
router.post("/saveMessages", (req, res) => chatNewController.sendMessage(req, res));
exports.default = router;
