"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = __importDefault(require("../../controllers/userController"));
const userUsecase_1 = __importDefault(require("../../useCases/userUsecase"));
const jwtAuth_1 = __importDefault(require("../utils/jwtAuth"));
const mailGenerator_1 = __importDefault(require("../utils/mailGenerator"));
const otpGenerator_1 = __importDefault(require("../utils/otpGenerator"));
const hashedPassword_1 = __importDefault(require("../utils/hashedPassword"));
const userAuth_1 = __importDefault(require("../middlewares/userAuth"));
const userRepository_1 = __importDefault(require("../repositories/userRepository"));
const cloudinary_1 = __importDefault(require("../utils/cloudinary"));
const multer_1 = require("../middlewares/multer");
const stripe_1 = __importDefault(require("../utils/stripe"));
const postController_1 = __importDefault(require("../../controllers/postController"));
const postRepository_1 = __importDefault(require("../repositories/postRepository"));
const postUsecase_1 = __importDefault(require("../../useCases/postUsecase"));
const router = express_1.default.Router();
const userRepo = new userRepository_1.default();
const otp = new otpGenerator_1.default();
const jwt = new jwtAuth_1.default();
const mail = new mailGenerator_1.default();
const hash = new hashedPassword_1.default();
const cloudinary = new cloudinary_1.default();
const stripe = new stripe_1.default();
const useCase = new userUsecase_1.default(userRepo, otp, jwt, mail, hash, cloudinary, stripe);
const userController = new userController_1.default(useCase);
const postRepo = new postRepository_1.default();
const postUseCase = new postUsecase_1.default(postRepo, cloudinary, jwt);
const postControl = new postController_1.default(postUseCase, jwt);
router.post('/signup', (req, res) => userController.signup(req, res));
router.post('/verifyOtp', (req, res) => userController.verifyOtp(req, res));
router.post('/login', (req, res) => userController.login(req, res));
router.get('/logout', (req, res) => userController.logout(req, res));
router.post('/resendOtp', (req, res) => userController.resendOtp(req, res));
router.post('/googleAuth', (req, res) => userController.googleAuth(req, res));
router.post('/forgotPassword', (req, res) => userController.forgetPassword(req, res));
router.post('/forgotPassOtpVerify', (req, res) => userController.forgotPasswordOtpVerification(req, res));
router.post('/changePassword', (req, res) => userController.changePassword(req, res));
router.get('/profile', userAuth_1.default, (req, res) => userController.getProfile(req, res));
router.patch('/editProfile', userAuth_1.default, multer_1.uploadFile.single('profileImage'), (req, res) => userController.editProfile(req, res));
router.post('/payment', userAuth_1.default, (req, res) => userController.fundraiser(req, res));
router.post('/createPost', multer_1.uploadFile.single('image'), (req, res) => postControl.createEvents(req, res));
router.get('/getPostsOne', userAuth_1.default, (req, res) => postControl.getPostsOne(req, res));
router.get('/getAllPosts', (req, res) => postControl.getAllPosts(req, res));
router.patch('/editPost', userAuth_1.default, multer_1.uploadFile.single('image'), (req, res) => postControl.editPost(req, res));
router.get('/deletePost/:id', userAuth_1.default, (req, res) => postControl.deletePost(req, res));
router.post('/likePost/:id', userAuth_1.default, (req, res) => postControl.likePost(req, res));
router.get('/isLiked/:id', userAuth_1.default, (req, res) => postControl.isLiked(req, res));
router.post('/addComment/:id', userAuth_1.default, (req, res) => postControl.addComment(req, res));
router.get('/getComments/:id', (req, res) => postControl.getComments(req, res));
router.post('/reportPost', userAuth_1.default, (req, res) => postControl.reportPost(req, res));
router.post('/savePost', userAuth_1.default, (req, res) => postControl.savePost(req, res));
router.get('/getSavedPosts', userAuth_1.default, (req, res) => postControl.getSavedPosts(req, res));
exports.default = router;
